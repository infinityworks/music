// Code generated by MockGen. DO NOT EDIT.
// Source: artist.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	music "github.com/infinityworks/music"
	reflect "reflect"
)

// MockArtistRepository is a mock of ArtistRepository interface
type MockArtistRepository struct {
	ctrl     *gomock.Controller
	recorder *MockArtistRepositoryMockRecorder
}

// MockArtistRepositoryMockRecorder is the mock recorder for MockArtistRepository
type MockArtistRepositoryMockRecorder struct {
	mock *MockArtistRepository
}

// NewMockArtistRepository creates a new mock instance
func NewMockArtistRepository(ctrl *gomock.Controller) *MockArtistRepository {
	mock := &MockArtistRepository{ctrl: ctrl}
	mock.recorder = &MockArtistRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockArtistRepository) EXPECT() *MockArtistRepositoryMockRecorder {
	return m.recorder
}

// GetByID mocks base method
func (m *MockArtistRepository) GetByID(id uuid.UUID) (music.Artist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(music.Artist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockArtistRepositoryMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockArtistRepository)(nil).GetByID), id)
}
