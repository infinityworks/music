// Code generated by MockGen. DO NOT EDIT.
// Source: album.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	music "github.com/infinityworks/music"
	reflect "reflect"
)

// MockAlbumRepository is a mock of AlbumRepository interface
type MockAlbumRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAlbumRepositoryMockRecorder
}

// MockAlbumRepositoryMockRecorder is the mock recorder for MockAlbumRepository
type MockAlbumRepositoryMockRecorder struct {
	mock *MockAlbumRepository
}

// NewMockAlbumRepository creates a new mock instance
func NewMockAlbumRepository(ctrl *gomock.Controller) *MockAlbumRepository {
	mock := &MockAlbumRepository{ctrl: ctrl}
	mock.recorder = &MockAlbumRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAlbumRepository) EXPECT() *MockAlbumRepositoryMockRecorder {
	return m.recorder
}

// GetByArtist mocks base method
func (m *MockAlbumRepository) GetByArtist(artistID uuid.UUID) ([]music.Album, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByArtist", artistID)
	ret0, _ := ret[0].([]music.Album)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByArtist indicates an expected call of GetByArtist
func (mr *MockAlbumRepositoryMockRecorder) GetByArtist(artistID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByArtist", reflect.TypeOf((*MockAlbumRepository)(nil).GetByArtist), artistID)
}
